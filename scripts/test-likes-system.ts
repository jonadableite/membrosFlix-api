/**
 * üß™ TESTE COMPLETO: Sistema de Likes e Coment√°rios
 * 
 * Este script testa:
 * - ‚úÖ Likes em aulas
 * - ‚úÖ Likes em coment√°rios
 * - ‚úÖ Contador persistente
 * - ‚úÖ Notifica√ß√µes
 */

import axios from "axios";

const BASE_URL = "http://localhost:3007";

interface TestResult {
  test: string;
  status: "‚úÖ PASS" | "‚ùå FAIL";
  details?: any;
  error?: string;
}

const results: TestResult[] = [];

async function testLikesAndComments() {
  console.log("üß™ INICIANDO TESTES DE LIKES E COMENT√ÅRIOS\n");
  console.log("=" .repeat(60));
  console.log("");

  try {
    // 1. Registrar usu√°rio
    console.log("üìù Teste 1: Registrar usu√°rio de teste...");
    const registerResponse = await axios.post(`${BASE_URL}/api/v1/auth/register`, {
      name: "Teste Like User",
      email: `testlike${Date.now()}@test.com`,
      password: "123456",
      confirmPassword: "123456",
    });

    if (registerResponse.data.success) {
      results.push({ test: "Registro de usu√°rio", status: "‚úÖ PASS" });
      console.log("‚úÖ Usu√°rio registrado com sucesso\n");
    }

    const token = registerResponse.data.data.tokens.accessToken;
    const userId = registerResponse.data.data.user.id;

    // 2. Listar cursos
    console.log("üìö Teste 2: Listar cursos...");
    const coursesResponse = await axios.get(`${BASE_URL}/api/v1/courses`);
    
    if (coursesResponse.data.length > 0 || coursesResponse.data.data?.length > 0) {
      const courses = coursesResponse.data.data || coursesResponse.data;
      const courseId = courses[0]?.id;
      console.log(`‚úÖ Cursos encontrados. Usando courseId: ${courseId}\n`);
      results.push({ test: "Listar cursos", status: "‚úÖ PASS" });

      // 3. Listar aulas do curso
      console.log("üìñ Teste 3: Listar aulas do curso...");
      const lessonsResponse = await axios.get(
        `${BASE_URL}/api/v1/courses/${courseId}/lessons`,
        {
          headers: { Authorization: `Bearer ${token}` },
        }
      );
      
      const lessons = lessonsResponse.data.data || lessonsResponse.data;
      
      if (lessons.length > 0) {
        const lessonId = lessons[0].id;
        console.log(`‚úÖ Aulas encontradas. Usando lessonId: ${lessonId}\n`);
        results.push({ test: "Listar aulas", status: "‚úÖ PASS" });

        // 4. Dar like na aula
        console.log("‚ù§Ô∏è  Teste 4: Dar like na aula...");
        const likeResponse = await axios.post(
          `${BASE_URL}/api/v1/courses/${courseId}/lessons/${lessonId}/likes`,
          {},
          {
            headers: { Authorization: `Bearer ${token}` },
          }
        );

        if (likeResponse.data.success) {
          console.log(`‚úÖ Like registrado! Liked: ${likeResponse.data.data.liked}, Count: ${likeResponse.data.data.likesCount}\n`);
          results.push({
            test: "Dar like na aula",
            status: "‚úÖ PASS",
            details: likeResponse.data.data,
          });
        }

        // 5. Verificar status de like
        console.log("üîç Teste 5: Verificar status de like...");
        const statusResponse = await axios.get(
          `${BASE_URL}/api/v1/courses/${courseId}/lessons/${lessonId}/likes/status`,
          {
            headers: { Authorization: `Bearer ${token}` },
          }
        );

        if (statusResponse.data.success) {
          console.log(`‚úÖ Status recuperado! Liked: ${statusResponse.data.data.liked}, Count: ${statusResponse.data.data.likesCount}\n`);
          results.push({
            test: "Status de like",
            status: "‚úÖ PASS",
            details: statusResponse.data.data,
          });
        }

        // 6. Remover like
        console.log("üíî Teste 6: Remover like...");
        const unlikeResponse = await axios.delete(
          `${BASE_URL}/api/v1/courses/${courseId}/lessons/${lessonId}/likes`,
          {
            headers: { Authorization: `Bearer ${token}` },
          }
        );

        if (unlikeResponse.data.success) {
          console.log(`‚úÖ Like removido! Liked: ${unlikeResponse.data.data.liked}, Count: ${unlikeResponse.data.data.likesCount}\n`);
          results.push({
            test: "Remover like",
            status: "‚úÖ PASS",
            details: unlikeResponse.data.data,
          });
        }

        // 7. Criar coment√°rio
        console.log("üí¨ Teste 7: Criar coment√°rio...");
        const commentResponse = await axios.post(
          `${BASE_URL}/api/v1/courses/${courseId}/lessons/${lessonId}/comentarios`,
          {
            content: "Teste de coment√°rio! Isso est√° funcionando perfeitamente! üöÄ",
          },
          {
            headers: { Authorization: `Bearer ${token}` },
          }
        );

        if (commentResponse.data.success) {
          const commentId = commentResponse.data.data.id;
          console.log(`‚úÖ Coment√°rio criado! ID: ${commentId}\n`);
          results.push({
            test: "Criar coment√°rio",
            status: "‚úÖ PASS",
            details: { commentId },
          });

          // 8. Curtir coment√°rio
          console.log("‚ù§Ô∏è  Teste 8: Curtir coment√°rio...");
          const commentLikeResponse = await axios.post(
            `${BASE_URL}/api/v1/courses/${courseId}/lessons/${lessonId}/comentarios/${commentId}/likes`,
            {},
            {
              headers: { Authorization: `Bearer ${token}` },
            }
          );

          if (commentLikeResponse.data.success) {
            console.log(`‚úÖ Like no coment√°rio! Liked: ${commentLikeResponse.data.data.liked}, Count: ${commentLikeResponse.data.data.likesCount}\n`);
            results.push({
              test: "Like em coment√°rio",
              status: "‚úÖ PASS",
              details: commentLikeResponse.data.data,
            });
          }
        }

        // 9. Verificar notifica√ß√µes
        console.log("üîî Teste 9: Verificar notifica√ß√µes...");
        const notificationsResponse = await axios.get(
          `${BASE_URL}/api/v1/notifications`,
          {
            headers: { Authorization: `Bearer ${token}` },
          }
        );

        const notifications = notificationsResponse.data.data || notificationsResponse.data;
        console.log(`‚úÖ Notifica√ß√µes recebidas: ${notifications.length}\n`);
        results.push({
          test: "Receber notifica√ß√µes",
          status: "‚úÖ PASS",
          details: { count: notifications.length },
        });
      } else {
        console.log("‚ö†Ô∏è  Nenhuma aula encontrada no curso\n");
      }
    } else {
      console.log("‚ö†Ô∏è  Nenhum curso encontrado\n");
    }
  } catch (error: any) {
    console.error("‚ùå ERRO:", error.response?.data || error.message);
    results.push({
      test: error.config?.url || "Unknown",
      status: "‚ùå FAIL",
      error: error.response?.data?.message || error.message,
    });
  }

  // Sum√°rio
  console.log("\n");
  console.log("=" .repeat(60));
  console.log("üìä SUM√ÅRIO DOS TESTES");
  console.log("=" .repeat(60));
  console.log("");

  results.forEach((result, index) => {
    console.log(`${index + 1}. ${result.status} ${result.test}`);
    if (result.details) {
      console.log(`   Detalhes:`, JSON.stringify(result.details, null, 2));
    }
    if (result.error) {
      console.log(`   Erro: ${result.error}`);
    }
  });

  const passed = results.filter((r) => r.status === "‚úÖ PASS").length;
  const total = results.length;

  console.log("");
  console.log(`Total: ${passed}/${total} testes passaram`);
  console.log("");

  if (passed === total) {
    console.log("üéâ TODOS OS TESTES PASSARAM! Sistema funcionando perfeitamente!");
  } else {
    console.log("‚ö†Ô∏è  Alguns testes falharam. Revisar erros acima.");
  }
}

testLikesAndComments().catch(console.error);

