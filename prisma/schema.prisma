datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Tenant {
  id          String   @id @default(uuid()) @db.Uuid
  name        String   @db.VarChar(255)
  domain      String?  @unique @db.VarChar(255)
  settings    Json?
  isActive    Boolean  @default(true)
  users       User[]
  courses     Curso[]
  instructors Instructor[]
  createdAt   DateTime @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime @updatedAt @db.Timestamptz(6)

  @@map("tenants")
}

model User {
  id             String         @id @default(uuid()) @db.Uuid
  tenantId       String         @db.Uuid
  name           String         @db.VarChar(255)
  email          String         @db.VarChar(255)
  passwordHash   String         @db.VarChar(255)
  profilePicture String?
  bio            String?
  aulas          Aula[]
  role           UserRole       @default(STUDENT)
  status         Boolean?       @default(true)
  ultimoAcesso   DateTime?
  progress       UserProgress[]
  comments       Comment[]
  likes          Like[]
  instructor     Instructor?
  enrollments    Enrollment[]

  referralCode   String? @unique
  referredBy     String? @db.Uuid
  referrer       User?   @relation("UserReferrals", fields: [referredBy], references: [id])
  referrals      User[]  @relation("UserReferrals")

  points         Int @default(0)
  referralPoints Int @default(0)

  notifications Notification[]
  achievements  UserAchievement[]

  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)

  @@unique([email, tenantId])
  @@index([tenantId])
  @@map("users")
}

model Instructor {
  id        Int      @id @default(autoincrement())
  tenantId  String   @db.Uuid
  userId    String   @unique @db.Uuid
  bio       String?
  expertise String[]
  courses   Curso[]
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)

  @@index([tenantId])
  @@map("instructors")
}

model UserProgress {
  id       Int    @id @default(autoincrement())
  userId   String @db.Uuid
  courseId Int
  aulaId   Int?
  progressoAula  Int?     @default(0)
  progressoCurso Int?     @default(0)
  concluido      Boolean? @default(false)
  iniciadoEm   DateTime?
  ultimoAcesso DateTime?
  tempoEstudo     Int       @default(0)
  ultimoProgresso DateTime?

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  curso Curso @relation(fields: [courseId], references: [id], onDelete: Cascade)
  aula  Aula? @relation(fields: [aulaId], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)

  @@unique([userId, courseId])
  @@map("users_progress")
}

model Notification {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @db.Uuid
  tipo      NotificationType
  mensagem  String
  dados     Json?    
  lida      Boolean  @default(false)
  criadoEm  DateTime @default(now()) @db.Timestamptz(6)
  atualizadoEm DateTime @updatedAt @db.Timestamptz(6)

  usuario User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([lida])
  @@map("notificacoes")
}

model UserAchievement {
  id            Int      @id @default(autoincrement())
  userId        String   @db.Uuid
  achievementId Int
  desbloquedoEm DateTime @default(now())

  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement Achievement @relation(fields: [achievementId], references: [id])

  @@unique([userId, achievementId])
  @@map("user_achievements")
}

model Achievement {
  id                Int             @id @default(autoincrement())
  nome              String
  descricao         String
  pontosNecessarios Int
  tipo              AchievementType

  usuarios UserAchievement[]

  @@map("achievements")
}

model Curso {
  id           Int          @id @default(autoincrement())
  tenantId     String       @db.Uuid
  title        String       @db.VarChar(255)
  description  String?
  path         String?      @db.VarChar(255)
  thumbnail    String?      @db.VarChar(255)
  status       CourseStatus @default(DRAFT)
  totalAulas   Int          @default(0)
  duracaoTotal Int?
  instructorId Int?
  instructor   Instructor?  @relation(fields: [instructorId], references: [id], onDelete: SetNull)
  
  // Campos adicionais para funcionalidades avançadas
  price        Decimal?     @db.Decimal(10, 2)
  category     String?      @db.VarChar(100)
  level        String?      @db.VarChar(50)
  tags         String[]     @default([])
  slug         String?      @db.VarChar(255)

  aulas       Aula[]
  progress    UserProgress[]
  comments    Comment[]
  likes       Like[]
  enrollments Enrollment[]
  tenant      Tenant       @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)

  @@unique([slug, tenantId])
  @@index([tenantId])
  @@map("curso")
}

model Aula {
  id           Int          @id @default(autoincrement())
  name         String       @db.VarChar(255)
  description  String?
  duration     Int
  path         String       @db.VarChar(255)
  courseId     Int?
  ordemAula    Int          @default(1)
  instructorId String       @db.Uuid
  
  // Campos adicionais para funcionalidades avançadas
  status       LessonStatus @default(DRAFT)
  isPreview    Boolean      @default(false)
  thumbnail    String?      @db.VarChar(255)
  videoUrl     String?      @db.VarChar(255)

  curso      Curso?         @relation(fields: [courseId], references: [id], onUpdate: Cascade, onDelete: SetNull)
  instructor User           @relation(fields: [instructorId], references: [id], onDelete: SetNull)
  progress   UserProgress[]
  comments   Comment[]
  likes      Like[]
  materiais  Material[]

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)

  @@map("aulas")
}

model Comment {
  id           Int       @id @default(autoincrement())
  content      String
  userId       String    @db.Uuid
  aulaId       Int?
  cursoId      Int?
  parentId     Int?
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  aula         Aula?     @relation(fields: [aulaId], references: [id], onDelete: Cascade)
  curso        Curso?    @relation(fields: [cursoId], references: [id], onDelete: Cascade)
  parent       Comment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies      Comment[] @relation("CommentReplies")
  likes        Like[]
  likesCount   Int       @default(0)
  repliesCount Int       @default(0)
  isAnonymous  Boolean   @default(false)
  createdAt    DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt    DateTime  @updatedAt @db.Timestamptz(6)

  @@map("comments")
}

model Like {
  id        Int      @id @default(autoincrement())
  userId    String   @db.Uuid
  aulaId    Int?
  cursoId   Int?
  commentId Int?
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  aula      Aula?    @relation(fields: [aulaId], references: [id], onDelete: Cascade)
  curso     Curso?   @relation(fields: [cursoId], references: [id], onDelete: Cascade)
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)

  @@unique([userId, commentId])
  @@map("likes")
}

model Material {
  id        Int      @id @default(autoincrement())
  title     String   @db.VarChar(255)
  url       String   @db.VarChar(255)
  aulaId    Int
  aula      Aula     @relation(fields: [aulaId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @db.Timestamptz(6)

  @@map("materiais")
}

model ReferralProgram {
  id            Int      @id @default(autoincrement())
  userId        String   @db.Uuid
  indicadoId    String   @db.Uuid
  pontosGanhos  Int      @default(0)
  valorDesconto Decimal? @db.Decimal(10, 2)
  createdAt     DateTime @default(now())

  @@unique([userId, indicadoId])
  @@map("referral_program")
}

model Enrollment {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @db.Uuid
  courseId  Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course    Curso    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)

  @@unique([userId, courseId])
  @@map("enrollments")
}

enum NotificationType {
  NOVA_AULA
  NOVO_COMENTARIO
  RESPOSTA_COMENTARIO  // ✅ Quando alguém responde seu comentário
  NOVA_CURTIDA         // ✅ Quando alguém curte sua aula/comentário
  PROGRESSO
  CONQUISTA
  INDICACAO
  CURSO_NOVO
  MENSAGEM
  BOAS_VINDAS
}

enum AchievementType {
  CURSO
  TEMPO_ESTUDO
  INDICACAO
  CONCLUSAO
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ACTIVE
  ARCHIVED
}

enum LessonStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum UserRole {
  STUDENT
  INSTRUCTOR
  ADMIN
}
